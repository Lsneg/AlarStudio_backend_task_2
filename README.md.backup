# Описание задачи
Можно использовать любой доступный метод для достижения “асинхронности” (concurrent computing), включая парадигмы как Reactive и т.п.

Есть три удаленных источника данных (в качестве источников для тестового задания то могут быть два статических JSON файла на том же сервере с массивом простых данных - ID и некое текстовое поле, содержащее в теле ID).

```

Пример:

[
{“id”:1,”name”:”Test 1”},
{“id”:2,”name”:”Test 2”}
]

Источники доступны по HTTP. В данных для каждого элемента должен быть ID.

ID распределены следующим образом:

1-й источник: ID 1-10,31-40;
2-й источник: ID 11-20,41-50;
3-й источник: ID 21-30,51-60;

```


Есть одна общая точка доступа до этих данных (приложение Node.js), которая выдаёт коррелированный результат. Точка доступна по HTTP.

Эта точка должна делать запросы ко всем источникам “асинхронно” и ждать результата со всех.
По получению результата от всех, выдать отсортированный по ID результат (данные со всех источников).
Ошибка от любого из источников игнорируется и интерпретируется, как отсутствие данных.

Ошибкой также считается таймаут (2 секунды).

Общее условие: для всех решенных задач нужно сделать инструкцию по запуску. Запуск проекта в Docker контейнерах или каким-то другим способом будет плюсом, но это не требуется.

# Реализация

Реализован все в одном приложении, есть 5 методов 

data-1 - 1-й источник: ID 1-10,31-40; таймаут ответа 1.6 сек

data-2 - 2-й источник: ID 11-20,41-50; таймаут ответа 1 сек

data-3 - 3-й источник: ID 21-30,51-60; без задержки

data4 - отдает статус 400, то есть запрос с ошибкой

data-5 - таймаут 2.5 секунды, запрос должен упасть по таймауту через 2 секунды

метод GET http://localhost:3000/get - общая точка которая обращается к 5 методам.

# Как запустить

1. yarn install
2. node app.js
3. отправить запрос http://localhost:3000/get

в консоли выводится лог показывающий порядок вызова методов:

```
-- Последовательность отрабатываемых запросов --
/data-3
-- --
-- Последовательность отрабатываемых запросов --
/data-2
-- --
-- Последовательность отрабатываемых запросов --
/data-1
-- --
```

